//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.02.28 at 10:41:42 AM MST 
//


package org.hl7.fhir.model.impl;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Attachment;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.DiagnosticReport;
import org.hl7.fhir.model.DiagnosticReportImage;
import org.hl7.fhir.model.DiagnosticReportStatus;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DiagnosticReport", propOrder = {
    "name",
    "status",
    "issued",
    "subject",
    "performer",
    "identifier",
    "requestDetail",
    "serviceCategory",
    "diagnosticDateTime",
    "diagnosticPeriod",
    "specimen",
    "result",
    "imagingStudy",
    "image",
    "conclusion",
    "codedDiagnosis",
    "presentedForm"
})
public class DiagnosticReportImpl
    extends ResourceImpl
    implements DiagnosticReport, ToString
{

    @XmlElement(required = true, type = CodeableConceptImpl.class)
    protected CodeableConceptImpl name;
    @XmlElement(required = true, type = DiagnosticReportStatusImpl.class)
    protected DiagnosticReportStatusImpl status;
    @XmlElement(required = true, type = DateTimeImpl.class)
    protected DateTimeImpl issued;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl performer;
    @XmlElement(type = IdentifierImpl.class)
    protected IdentifierImpl identifier;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected List<ResourceReference> requestDetail;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl serviceCategory;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl diagnosticDateTime;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl diagnosticPeriod;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected List<ResourceReference> specimen;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected List<ResourceReference> result;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected List<ResourceReference> imagingStudy;
    @XmlElement(type = DiagnosticReportImageImpl.class)
    protected List<DiagnosticReportImage> image;
    @XmlElement(type = StringImpl.class)
    protected StringImpl conclusion;
    @XmlElement(type = CodeableConceptImpl.class)
    protected List<CodeableConcept> codedDiagnosis;
    @XmlElement(type = AttachmentImpl.class)
    protected List<Attachment> presentedForm;

    public CodeableConcept getName() {
        return name;
    }

    public void setName(CodeableConcept value) {
        this.name = ((CodeableConceptImpl) value);
    }

    public DiagnosticReportStatus getStatus() {
        return status;
    }

    public void setStatus(DiagnosticReportStatus value) {
        this.status = ((DiagnosticReportStatusImpl) value);
    }

    public DateTime getIssued() {
        return issued;
    }

    public void setIssued(DateTime value) {
        this.issued = ((DateTimeImpl) value);
    }

    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    public ResourceReference getPerformer() {
        return performer;
    }

    public void setPerformer(ResourceReference value) {
        this.performer = ((ResourceReferenceImpl) value);
    }

    public Identifier getIdentifier() {
        return identifier;
    }

    public void setIdentifier(Identifier value) {
        this.identifier = ((IdentifierImpl) value);
    }

    public List<ResourceReference> getRequestDetail() {
        if (requestDetail == null) {
            requestDetail = new ArrayList<ResourceReference>();
        }
        return this.requestDetail;
    }

    public CodeableConcept getServiceCategory() {
        return serviceCategory;
    }

    public void setServiceCategory(CodeableConcept value) {
        this.serviceCategory = ((CodeableConceptImpl) value);
    }

    public DateTime getDiagnosticDateTime() {
        return diagnosticDateTime;
    }

    public void setDiagnosticDateTime(DateTime value) {
        this.diagnosticDateTime = ((DateTimeImpl) value);
    }

    public Period getDiagnosticPeriod() {
        return diagnosticPeriod;
    }

    public void setDiagnosticPeriod(Period value) {
        this.diagnosticPeriod = ((PeriodImpl) value);
    }

    public List<ResourceReference> getSpecimen() {
        if (specimen == null) {
            specimen = new ArrayList<ResourceReference>();
        }
        return this.specimen;
    }

    public List<ResourceReference> getResult() {
        if (result == null) {
            result = new ArrayList<ResourceReference>();
        }
        return this.result;
    }

    public List<ResourceReference> getImagingStudy() {
        if (imagingStudy == null) {
            imagingStudy = new ArrayList<ResourceReference>();
        }
        return this.imagingStudy;
    }

    public List<DiagnosticReportImage> getImage() {
        if (image == null) {
            image = new ArrayList<DiagnosticReportImage>();
        }
        return this.image;
    }

    public org.hl7.fhir.model.String getConclusion() {
        return conclusion;
    }

    public void setConclusion(org.hl7.fhir.model.String value) {
        this.conclusion = ((StringImpl) value);
    }

    public List<CodeableConcept> getCodedDiagnosis() {
        if (codedDiagnosis == null) {
            codedDiagnosis = new ArrayList<CodeableConcept>();
        }
        return this.codedDiagnosis;
    }

    public List<Attachment> getPresentedForm() {
        if (presentedForm == null) {
            presentedForm = new ArrayList<Attachment>();
        }
        return this.presentedForm;
    }

    public java.lang.String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CodeableConcept theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            DiagnosticReportStatus theStatus;
            theStatus = this.getStatus();
            strategy.appendField(locator, this, "status", buffer, theStatus);
        }
        {
            DateTime theIssued;
            theIssued = this.getIssued();
            strategy.appendField(locator, this, "issued", buffer, theIssued);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            strategy.appendField(locator, this, "subject", buffer, theSubject);
        }
        {
            ResourceReference thePerformer;
            thePerformer = this.getPerformer();
            strategy.appendField(locator, this, "performer", buffer, thePerformer);
        }
        {
            Identifier theIdentifier;
            theIdentifier = this.getIdentifier();
            strategy.appendField(locator, this, "identifier", buffer, theIdentifier);
        }
        {
            List<ResourceReference> theRequestDetail;
            theRequestDetail = (((this.requestDetail!= null)&&(!this.requestDetail.isEmpty()))?this.getRequestDetail():null);
            strategy.appendField(locator, this, "requestDetail", buffer, theRequestDetail);
        }
        {
            CodeableConcept theServiceCategory;
            theServiceCategory = this.getServiceCategory();
            strategy.appendField(locator, this, "serviceCategory", buffer, theServiceCategory);
        }
        {
            DateTime theDiagnosticDateTime;
            theDiagnosticDateTime = this.getDiagnosticDateTime();
            strategy.appendField(locator, this, "diagnosticDateTime", buffer, theDiagnosticDateTime);
        }
        {
            Period theDiagnosticPeriod;
            theDiagnosticPeriod = this.getDiagnosticPeriod();
            strategy.appendField(locator, this, "diagnosticPeriod", buffer, theDiagnosticPeriod);
        }
        {
            List<ResourceReference> theSpecimen;
            theSpecimen = (((this.specimen!= null)&&(!this.specimen.isEmpty()))?this.getSpecimen():null);
            strategy.appendField(locator, this, "specimen", buffer, theSpecimen);
        }
        {
            List<ResourceReference> theResult;
            theResult = (((this.result!= null)&&(!this.result.isEmpty()))?this.getResult():null);
            strategy.appendField(locator, this, "result", buffer, theResult);
        }
        {
            List<ResourceReference> theImagingStudy;
            theImagingStudy = (((this.imagingStudy!= null)&&(!this.imagingStudy.isEmpty()))?this.getImagingStudy():null);
            strategy.appendField(locator, this, "imagingStudy", buffer, theImagingStudy);
        }
        {
            List<DiagnosticReportImage> theImage;
            theImage = (((this.image!= null)&&(!this.image.isEmpty()))?this.getImage():null);
            strategy.appendField(locator, this, "image", buffer, theImage);
        }
        {
            org.hl7.fhir.model.String theConclusion;
            theConclusion = this.getConclusion();
            strategy.appendField(locator, this, "conclusion", buffer, theConclusion);
        }
        {
            List<CodeableConcept> theCodedDiagnosis;
            theCodedDiagnosis = (((this.codedDiagnosis!= null)&&(!this.codedDiagnosis.isEmpty()))?this.getCodedDiagnosis():null);
            strategy.appendField(locator, this, "codedDiagnosis", buffer, theCodedDiagnosis);
        }
        {
            List<Attachment> thePresentedForm;
            thePresentedForm = (((this.presentedForm!= null)&&(!this.presentedForm.isEmpty()))?this.getPresentedForm():null);
            strategy.appendField(locator, this, "presentedForm", buffer, thePresentedForm);
        }
        return buffer;
    }

}

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.02.28 at 10:41:42 AM MST 
//


package org.hl7.fhir.model.impl;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.EncounterAccomodation;
import org.hl7.fhir.model.EncounterHospitalization;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Encounter.Hospitalization", propOrder = {
    "preAdmissionIdentifier",
    "origin",
    "admitSource",
    "period",
    "accomodation",
    "diet",
    "specialCourtesy",
    "specialArrangement",
    "destination",
    "dischargeDisposition",
    "dischargeDiagnosis",
    "reAdmission"
})
public class EncounterHospitalizationImpl
    extends BackboneElementImpl
    implements EncounterHospitalization, ToString
{

    @XmlElement(type = IdentifierImpl.class)
    protected IdentifierImpl preAdmissionIdentifier;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl origin;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl admitSource;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl period;
    @XmlElement(type = EncounterAccomodationImpl.class)
    protected List<EncounterAccomodation> accomodation;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl diet;
    @XmlElement(type = CodeableConceptImpl.class)
    protected List<CodeableConcept> specialCourtesy;
    @XmlElement(type = CodeableConceptImpl.class)
    protected List<CodeableConcept> specialArrangement;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl destination;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl dischargeDisposition;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl dischargeDiagnosis;
    @XmlElement(type = BooleanImpl.class)
    protected BooleanImpl reAdmission;

    public Identifier getPreAdmissionIdentifier() {
        return preAdmissionIdentifier;
    }

    public void setPreAdmissionIdentifier(Identifier value) {
        this.preAdmissionIdentifier = ((IdentifierImpl) value);
    }

    public ResourceReference getOrigin() {
        return origin;
    }

    public void setOrigin(ResourceReference value) {
        this.origin = ((ResourceReferenceImpl) value);
    }

    public CodeableConcept getAdmitSource() {
        return admitSource;
    }

    public void setAdmitSource(CodeableConcept value) {
        this.admitSource = ((CodeableConceptImpl) value);
    }

    public Period getPeriod() {
        return period;
    }

    public void setPeriod(Period value) {
        this.period = ((PeriodImpl) value);
    }

    public List<EncounterAccomodation> getAccomodation() {
        if (accomodation == null) {
            accomodation = new ArrayList<EncounterAccomodation>();
        }
        return this.accomodation;
    }

    public CodeableConcept getDiet() {
        return diet;
    }

    public void setDiet(CodeableConcept value) {
        this.diet = ((CodeableConceptImpl) value);
    }

    public List<CodeableConcept> getSpecialCourtesy() {
        if (specialCourtesy == null) {
            specialCourtesy = new ArrayList<CodeableConcept>();
        }
        return this.specialCourtesy;
    }

    public List<CodeableConcept> getSpecialArrangement() {
        if (specialArrangement == null) {
            specialArrangement = new ArrayList<CodeableConcept>();
        }
        return this.specialArrangement;
    }

    public ResourceReference getDestination() {
        return destination;
    }

    public void setDestination(ResourceReference value) {
        this.destination = ((ResourceReferenceImpl) value);
    }

    public CodeableConcept getDischargeDisposition() {
        return dischargeDisposition;
    }

    public void setDischargeDisposition(CodeableConcept value) {
        this.dischargeDisposition = ((CodeableConceptImpl) value);
    }

    public ResourceReference getDischargeDiagnosis() {
        return dischargeDiagnosis;
    }

    public void setDischargeDiagnosis(ResourceReference value) {
        this.dischargeDiagnosis = ((ResourceReferenceImpl) value);
    }

    public Boolean getReAdmission() {
        return reAdmission;
    }

    public void setReAdmission(Boolean value) {
        this.reAdmission = ((BooleanImpl) value);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            Identifier thePreAdmissionIdentifier;
            thePreAdmissionIdentifier = this.getPreAdmissionIdentifier();
            strategy.appendField(locator, this, "preAdmissionIdentifier", buffer, thePreAdmissionIdentifier);
        }
        {
            ResourceReference theOrigin;
            theOrigin = this.getOrigin();
            strategy.appendField(locator, this, "origin", buffer, theOrigin);
        }
        {
            CodeableConcept theAdmitSource;
            theAdmitSource = this.getAdmitSource();
            strategy.appendField(locator, this, "admitSource", buffer, theAdmitSource);
        }
        {
            Period thePeriod;
            thePeriod = this.getPeriod();
            strategy.appendField(locator, this, "period", buffer, thePeriod);
        }
        {
            List<EncounterAccomodation> theAccomodation;
            theAccomodation = (((this.accomodation!= null)&&(!this.accomodation.isEmpty()))?this.getAccomodation():null);
            strategy.appendField(locator, this, "accomodation", buffer, theAccomodation);
        }
        {
            CodeableConcept theDiet;
            theDiet = this.getDiet();
            strategy.appendField(locator, this, "diet", buffer, theDiet);
        }
        {
            List<CodeableConcept> theSpecialCourtesy;
            theSpecialCourtesy = (((this.specialCourtesy!= null)&&(!this.specialCourtesy.isEmpty()))?this.getSpecialCourtesy():null);
            strategy.appendField(locator, this, "specialCourtesy", buffer, theSpecialCourtesy);
        }
        {
            List<CodeableConcept> theSpecialArrangement;
            theSpecialArrangement = (((this.specialArrangement!= null)&&(!this.specialArrangement.isEmpty()))?this.getSpecialArrangement():null);
            strategy.appendField(locator, this, "specialArrangement", buffer, theSpecialArrangement);
        }
        {
            ResourceReference theDestination;
            theDestination = this.getDestination();
            strategy.appendField(locator, this, "destination", buffer, theDestination);
        }
        {
            CodeableConcept theDischargeDisposition;
            theDischargeDisposition = this.getDischargeDisposition();
            strategy.appendField(locator, this, "dischargeDisposition", buffer, theDischargeDisposition);
        }
        {
            ResourceReference theDischargeDiagnosis;
            theDischargeDiagnosis = this.getDischargeDiagnosis();
            strategy.appendField(locator, this, "dischargeDiagnosis", buffer, theDischargeDiagnosis);
        }
        {
            Boolean theReAdmission;
            theReAdmission = this.getReAdmission();
            strategy.appendField(locator, this, "reAdmission", buffer, theReAdmission);
        }
        return buffer;
    }

}

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.02.28 at 10:41:42 AM MST 
//


package org.hl7.fhir.model.impl;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.SecurityEvent;
import org.hl7.fhir.model.SecurityEventEvent;
import org.hl7.fhir.model.SecurityEventObject;
import org.hl7.fhir.model.SecurityEventParticipant;
import org.hl7.fhir.model.SecurityEventSource;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SecurityEvent", propOrder = {
    "event",
    "participant",
    "source",
    "object"
})
public class SecurityEventImpl
    extends ResourceImpl
    implements SecurityEvent, ToString
{

    @XmlElement(required = true, type = SecurityEventEventImpl.class)
    protected SecurityEventEventImpl event;
    @XmlElement(required = true, type = SecurityEventParticipantImpl.class)
    protected List<SecurityEventParticipant> participant;
    @XmlElement(required = true, type = SecurityEventSourceImpl.class)
    protected SecurityEventSourceImpl source;
    @XmlElement(type = SecurityEventObjectImpl.class)
    protected List<SecurityEventObject> object;

    public SecurityEventEvent getEvent() {
        return event;
    }

    public void setEvent(SecurityEventEvent value) {
        this.event = ((SecurityEventEventImpl) value);
    }

    public List<SecurityEventParticipant> getParticipant() {
        if (participant == null) {
            participant = new ArrayList<SecurityEventParticipant>();
        }
        return this.participant;
    }

    public SecurityEventSource getSource() {
        return source;
    }

    public void setSource(SecurityEventSource value) {
        this.source = ((SecurityEventSourceImpl) value);
    }

    public List<SecurityEventObject> getObject() {
        if (object == null) {
            object = new ArrayList<SecurityEventObject>();
        }
        return this.object;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            SecurityEventEvent theEvent;
            theEvent = this.getEvent();
            strategy.appendField(locator, this, "event", buffer, theEvent);
        }
        {
            List<SecurityEventParticipant> theParticipant;
            theParticipant = (((this.participant!= null)&&(!this.participant.isEmpty()))?this.getParticipant():null);
            strategy.appendField(locator, this, "participant", buffer, theParticipant);
        }
        {
            SecurityEventSource theSource;
            theSource = this.getSource();
            strategy.appendField(locator, this, "source", buffer, theSource);
        }
        {
            List<SecurityEventObject> theObject;
            theObject = (((this.object!= null)&&(!this.object.isEmpty()))?this.getObject():null);
            strategy.appendField(locator, this, "object", buffer, theObject);
        }
        return buffer;
    }

}

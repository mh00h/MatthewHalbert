//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.02.28 at 10:41:42 AM MST 
//


package org.hl7.fhir.model.impl;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.ExtensionContext;
import org.hl7.fhir.model.ProfileDefinition;
import org.hl7.fhir.model.ProfileExtensionDefn;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Profile.ExtensionDefn", propOrder = {
    "code",
    "display",
    "contextType",
    "context",
    "definition"
})
public class ProfileExtensionDefnImpl
    extends BackboneElementImpl
    implements ProfileExtensionDefn, ToString
{

    @XmlElement(required = true, type = CodeImpl.class)
    protected CodeImpl code;
    @XmlElement(type = StringImpl.class)
    protected StringImpl display;
    @XmlElement(required = true, type = ExtensionContextImpl.class)
    protected ExtensionContextImpl contextType;
    @XmlElement(required = true, type = StringImpl.class)
    protected List<org.hl7.fhir.model.String> context;
    @XmlElement(required = true, type = ProfileDefinitionImpl.class)
    protected ProfileDefinitionImpl definition;

    public Code getCode() {
        return code;
    }

    public void setCode(Code value) {
        this.code = ((CodeImpl) value);
    }

    public org.hl7.fhir.model.String getDisplay() {
        return display;
    }

    public void setDisplay(org.hl7.fhir.model.String value) {
        this.display = ((StringImpl) value);
    }

    public ExtensionContext getContextType() {
        return contextType;
    }

    public void setContextType(ExtensionContext value) {
        this.contextType = ((ExtensionContextImpl) value);
    }

    public List<org.hl7.fhir.model.String> getContext() {
        if (context == null) {
            context = new ArrayList<org.hl7.fhir.model.String>();
        }
        return this.context;
    }

    public ProfileDefinition getDefinition() {
        return definition;
    }

    public void setDefinition(ProfileDefinition value) {
        this.definition = ((ProfileDefinitionImpl) value);
    }

    public java.lang.String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            Code theCode;
            theCode = this.getCode();
            strategy.appendField(locator, this, "code", buffer, theCode);
        }
        {
            org.hl7.fhir.model.String theDisplay;
            theDisplay = this.getDisplay();
            strategy.appendField(locator, this, "display", buffer, theDisplay);
        }
        {
            ExtensionContext theContextType;
            theContextType = this.getContextType();
            strategy.appendField(locator, this, "contextType", buffer, theContextType);
        }
        {
            List<org.hl7.fhir.model.String> theContext;
            theContext = (((this.context!= null)&&(!this.context.isEmpty()))?this.getContext():null);
            strategy.appendField(locator, this, "context", buffer, theContext);
        }
        {
            ProfileDefinition theDefinition;
            theDefinition = this.getDefinition();
            strategy.appendField(locator, this, "definition", buffer, theDefinition);
        }
        return buffer;
    }

}

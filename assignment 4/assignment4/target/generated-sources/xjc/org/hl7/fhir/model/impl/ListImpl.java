//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.02.28 at 10:41:42 AM MST 
//


package org.hl7.fhir.model.impl;

import java.util.ArrayList;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.ListEntry;
import org.hl7.fhir.model.ListMode;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "List", propOrder = {
    "identifier",
    "code",
    "subject",
    "source",
    "date",
    "ordered",
    "mode",
    "entry",
    "emptyReason"
})
public class ListImpl
    extends ResourceImpl
    implements org.hl7.fhir.model.List, ToString
{

    @XmlElement(type = IdentifierImpl.class)
    protected java.util.List<Identifier> identifier;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl code;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl source;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl date;
    @XmlElement(type = BooleanImpl.class)
    protected BooleanImpl ordered;
    @XmlElement(required = true, type = ListModeImpl.class)
    protected ListModeImpl mode;
    @XmlElement(type = ListEntryImpl.class)
    protected java.util.List<ListEntry> entry;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl emptyReason;

    public java.util.List<Identifier> getIdentifier() {
        if (identifier == null) {
            identifier = new ArrayList<Identifier>();
        }
        return this.identifier;
    }

    public CodeableConcept getCode() {
        return code;
    }

    public void setCode(CodeableConcept value) {
        this.code = ((CodeableConceptImpl) value);
    }

    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    public ResourceReference getSource() {
        return source;
    }

    public void setSource(ResourceReference value) {
        this.source = ((ResourceReferenceImpl) value);
    }

    public DateTime getDate() {
        return date;
    }

    public void setDate(DateTime value) {
        this.date = ((DateTimeImpl) value);
    }

    public Boolean getOrdered() {
        return ordered;
    }

    public void setOrdered(Boolean value) {
        this.ordered = ((BooleanImpl) value);
    }

    public ListMode getMode() {
        return mode;
    }

    public void setMode(ListMode value) {
        this.mode = ((ListModeImpl) value);
    }

    public java.util.List<ListEntry> getEntry() {
        if (entry == null) {
            entry = new ArrayList<ListEntry>();
        }
        return this.entry;
    }

    public CodeableConcept getEmptyReason() {
        return emptyReason;
    }

    public void setEmptyReason(CodeableConcept value) {
        this.emptyReason = ((CodeableConceptImpl) value);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            java.util.List<Identifier> theIdentifier;
            theIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            strategy.appendField(locator, this, "identifier", buffer, theIdentifier);
        }
        {
            CodeableConcept theCode;
            theCode = this.getCode();
            strategy.appendField(locator, this, "code", buffer, theCode);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            strategy.appendField(locator, this, "subject", buffer, theSubject);
        }
        {
            ResourceReference theSource;
            theSource = this.getSource();
            strategy.appendField(locator, this, "source", buffer, theSource);
        }
        {
            DateTime theDate;
            theDate = this.getDate();
            strategy.appendField(locator, this, "date", buffer, theDate);
        }
        {
            Boolean theOrdered;
            theOrdered = this.getOrdered();
            strategy.appendField(locator, this, "ordered", buffer, theOrdered);
        }
        {
            ListMode theMode;
            theMode = this.getMode();
            strategy.appendField(locator, this, "mode", buffer, theMode);
        }
        {
            java.util.List<ListEntry> theEntry;
            theEntry = (((this.entry!= null)&&(!this.entry.isEmpty()))?this.getEntry():null);
            strategy.appendField(locator, this, "entry", buffer, theEntry);
        }
        {
            CodeableConcept theEmptyReason;
            theEmptyReason = this.getEmptyReason();
            strategy.appendField(locator, this, "emptyReason", buffer, theEmptyReason);
        }
        return buffer;
    }

}

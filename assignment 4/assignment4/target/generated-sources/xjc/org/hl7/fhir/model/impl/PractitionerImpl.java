//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.02.28 at 10:41:42 AM MST 
//


package org.hl7.fhir.model.impl;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Address;
import org.hl7.fhir.model.Attachment;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Contact;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.HumanName;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.Practitioner;
import org.hl7.fhir.model.PractitionerQualification;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Practitioner", propOrder = {
    "identifier",
    "name",
    "telecom",
    "address",
    "gender",
    "birthDate",
    "photo",
    "organization",
    "role",
    "specialty",
    "period",
    "location",
    "qualification",
    "communication"
})
public class PractitionerImpl
    extends ResourceImpl
    implements Practitioner, ToString
{

    @XmlElement(type = IdentifierImpl.class)
    protected List<Identifier> identifier;
    @XmlElement(type = HumanNameImpl.class)
    protected HumanNameImpl name;
    @XmlElement(type = ContactImpl.class)
    protected List<Contact> telecom;
    @XmlElement(type = AddressImpl.class)
    protected AddressImpl address;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl gender;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl birthDate;
    @XmlElement(type = AttachmentImpl.class)
    protected List<Attachment> photo;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl organization;
    @XmlElement(type = CodeableConceptImpl.class)
    protected List<CodeableConcept> role;
    @XmlElement(type = CodeableConceptImpl.class)
    protected List<CodeableConcept> specialty;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl period;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected List<ResourceReference> location;
    @XmlElement(type = PractitionerQualificationImpl.class)
    protected List<PractitionerQualification> qualification;
    @XmlElement(type = CodeableConceptImpl.class)
    protected List<CodeableConcept> communication;

    public List<Identifier> getIdentifier() {
        if (identifier == null) {
            identifier = new ArrayList<Identifier>();
        }
        return this.identifier;
    }

    public HumanName getName() {
        return name;
    }

    public void setName(HumanName value) {
        this.name = ((HumanNameImpl) value);
    }

    public List<Contact> getTelecom() {
        if (telecom == null) {
            telecom = new ArrayList<Contact>();
        }
        return this.telecom;
    }

    public Address getAddress() {
        return address;
    }

    public void setAddress(Address value) {
        this.address = ((AddressImpl) value);
    }

    public CodeableConcept getGender() {
        return gender;
    }

    public void setGender(CodeableConcept value) {
        this.gender = ((CodeableConceptImpl) value);
    }

    public DateTime getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(DateTime value) {
        this.birthDate = ((DateTimeImpl) value);
    }

    public List<Attachment> getPhoto() {
        if (photo == null) {
            photo = new ArrayList<Attachment>();
        }
        return this.photo;
    }

    public ResourceReference getOrganization() {
        return organization;
    }

    public void setOrganization(ResourceReference value) {
        this.organization = ((ResourceReferenceImpl) value);
    }

    public List<CodeableConcept> getRole() {
        if (role == null) {
            role = new ArrayList<CodeableConcept>();
        }
        return this.role;
    }

    public List<CodeableConcept> getSpecialty() {
        if (specialty == null) {
            specialty = new ArrayList<CodeableConcept>();
        }
        return this.specialty;
    }

    public Period getPeriod() {
        return period;
    }

    public void setPeriod(Period value) {
        this.period = ((PeriodImpl) value);
    }

    public List<ResourceReference> getLocation() {
        if (location == null) {
            location = new ArrayList<ResourceReference>();
        }
        return this.location;
    }

    public List<PractitionerQualification> getQualification() {
        if (qualification == null) {
            qualification = new ArrayList<PractitionerQualification>();
        }
        return this.qualification;
    }

    public List<CodeableConcept> getCommunication() {
        if (communication == null) {
            communication = new ArrayList<CodeableConcept>();
        }
        return this.communication;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<Identifier> theIdentifier;
            theIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            strategy.appendField(locator, this, "identifier", buffer, theIdentifier);
        }
        {
            HumanName theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            List<Contact> theTelecom;
            theTelecom = (((this.telecom!= null)&&(!this.telecom.isEmpty()))?this.getTelecom():null);
            strategy.appendField(locator, this, "telecom", buffer, theTelecom);
        }
        {
            Address theAddress;
            theAddress = this.getAddress();
            strategy.appendField(locator, this, "address", buffer, theAddress);
        }
        {
            CodeableConcept theGender;
            theGender = this.getGender();
            strategy.appendField(locator, this, "gender", buffer, theGender);
        }
        {
            DateTime theBirthDate;
            theBirthDate = this.getBirthDate();
            strategy.appendField(locator, this, "birthDate", buffer, theBirthDate);
        }
        {
            List<Attachment> thePhoto;
            thePhoto = (((this.photo!= null)&&(!this.photo.isEmpty()))?this.getPhoto():null);
            strategy.appendField(locator, this, "photo", buffer, thePhoto);
        }
        {
            ResourceReference theOrganization;
            theOrganization = this.getOrganization();
            strategy.appendField(locator, this, "organization", buffer, theOrganization);
        }
        {
            List<CodeableConcept> theRole;
            theRole = (((this.role!= null)&&(!this.role.isEmpty()))?this.getRole():null);
            strategy.appendField(locator, this, "role", buffer, theRole);
        }
        {
            List<CodeableConcept> theSpecialty;
            theSpecialty = (((this.specialty!= null)&&(!this.specialty.isEmpty()))?this.getSpecialty():null);
            strategy.appendField(locator, this, "specialty", buffer, theSpecialty);
        }
        {
            Period thePeriod;
            thePeriod = this.getPeriod();
            strategy.appendField(locator, this, "period", buffer, thePeriod);
        }
        {
            List<ResourceReference> theLocation;
            theLocation = (((this.location!= null)&&(!this.location.isEmpty()))?this.getLocation():null);
            strategy.appendField(locator, this, "location", buffer, theLocation);
        }
        {
            List<PractitionerQualification> theQualification;
            theQualification = (((this.qualification!= null)&&(!this.qualification.isEmpty()))?this.getQualification():null);
            strategy.appendField(locator, this, "qualification", buffer, theQualification);
        }
        {
            List<CodeableConcept> theCommunication;
            theCommunication = (((this.communication!= null)&&(!this.communication.isEmpty()))?this.getCommunication():null);
            strategy.appendField(locator, this, "communication", buffer, theCommunication);
        }
        return buffer;
    }

}

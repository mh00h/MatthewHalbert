//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.02.28 at 10:41:42 AM MST 
//


package org.hl7.fhir.model.impl;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.DiagnosticOrder;
import org.hl7.fhir.model.DiagnosticOrderEvent;
import org.hl7.fhir.model.DiagnosticOrderItem;
import org.hl7.fhir.model.DiagnosticOrderPriority;
import org.hl7.fhir.model.DiagnosticOrderStatus;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DiagnosticOrder", propOrder = {
    "subject",
    "orderer",
    "identifier",
    "encounter",
    "clinicalNotes",
    "specimen",
    "status",
    "priority",
    "event",
    "item"
})
public class DiagnosticOrderImpl
    extends ResourceImpl
    implements DiagnosticOrder, ToString
{

    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl orderer;
    @XmlElement(type = IdentifierImpl.class)
    protected List<Identifier> identifier;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl encounter;
    @XmlElement(type = StringImpl.class)
    protected StringImpl clinicalNotes;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected List<ResourceReference> specimen;
    @XmlElement(type = DiagnosticOrderStatusImpl.class)
    protected DiagnosticOrderStatusImpl status;
    @XmlElement(type = DiagnosticOrderPriorityImpl.class)
    protected DiagnosticOrderPriorityImpl priority;
    @XmlElement(type = DiagnosticOrderEventImpl.class)
    protected List<DiagnosticOrderEvent> event;
    @XmlElement(type = DiagnosticOrderItemImpl.class)
    protected List<DiagnosticOrderItem> item;

    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    public ResourceReference getOrderer() {
        return orderer;
    }

    public void setOrderer(ResourceReference value) {
        this.orderer = ((ResourceReferenceImpl) value);
    }

    public List<Identifier> getIdentifier() {
        if (identifier == null) {
            identifier = new ArrayList<Identifier>();
        }
        return this.identifier;
    }

    public ResourceReference getEncounter() {
        return encounter;
    }

    public void setEncounter(ResourceReference value) {
        this.encounter = ((ResourceReferenceImpl) value);
    }

    public org.hl7.fhir.model.String getClinicalNotes() {
        return clinicalNotes;
    }

    public void setClinicalNotes(org.hl7.fhir.model.String value) {
        this.clinicalNotes = ((StringImpl) value);
    }

    public List<ResourceReference> getSpecimen() {
        if (specimen == null) {
            specimen = new ArrayList<ResourceReference>();
        }
        return this.specimen;
    }

    public DiagnosticOrderStatus getStatus() {
        return status;
    }

    public void setStatus(DiagnosticOrderStatus value) {
        this.status = ((DiagnosticOrderStatusImpl) value);
    }

    public DiagnosticOrderPriority getPriority() {
        return priority;
    }

    public void setPriority(DiagnosticOrderPriority value) {
        this.priority = ((DiagnosticOrderPriorityImpl) value);
    }

    public List<DiagnosticOrderEvent> getEvent() {
        if (event == null) {
            event = new ArrayList<DiagnosticOrderEvent>();
        }
        return this.event;
    }

    public List<DiagnosticOrderItem> getItem() {
        if (item == null) {
            item = new ArrayList<DiagnosticOrderItem>();
        }
        return this.item;
    }

    public java.lang.String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            strategy.appendField(locator, this, "subject", buffer, theSubject);
        }
        {
            ResourceReference theOrderer;
            theOrderer = this.getOrderer();
            strategy.appendField(locator, this, "orderer", buffer, theOrderer);
        }
        {
            List<Identifier> theIdentifier;
            theIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            strategy.appendField(locator, this, "identifier", buffer, theIdentifier);
        }
        {
            ResourceReference theEncounter;
            theEncounter = this.getEncounter();
            strategy.appendField(locator, this, "encounter", buffer, theEncounter);
        }
        {
            org.hl7.fhir.model.String theClinicalNotes;
            theClinicalNotes = this.getClinicalNotes();
            strategy.appendField(locator, this, "clinicalNotes", buffer, theClinicalNotes);
        }
        {
            List<ResourceReference> theSpecimen;
            theSpecimen = (((this.specimen!= null)&&(!this.specimen.isEmpty()))?this.getSpecimen():null);
            strategy.appendField(locator, this, "specimen", buffer, theSpecimen);
        }
        {
            DiagnosticOrderStatus theStatus;
            theStatus = this.getStatus();
            strategy.appendField(locator, this, "status", buffer, theStatus);
        }
        {
            DiagnosticOrderPriority thePriority;
            thePriority = this.getPriority();
            strategy.appendField(locator, this, "priority", buffer, thePriority);
        }
        {
            List<DiagnosticOrderEvent> theEvent;
            theEvent = (((this.event!= null)&&(!this.event.isEmpty()))?this.getEvent():null);
            strategy.appendField(locator, this, "event", buffer, theEvent);
        }
        {
            List<DiagnosticOrderItem> theItem;
            theItem = (((this.item!= null)&&(!this.item.isEmpty()))?this.getItem():null);
            strategy.appendField(locator, this, "item", buffer, theItem);
        }
        return buffer;
    }

}

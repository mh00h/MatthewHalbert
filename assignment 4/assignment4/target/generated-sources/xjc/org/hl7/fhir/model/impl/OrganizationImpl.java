//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.02.28 at 10:41:42 AM MST 
//


package org.hl7.fhir.model.impl;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Address;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Contact;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Organization;
import org.hl7.fhir.model.OrganizationContact;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Organization", propOrder = {
    "identifier",
    "name",
    "type",
    "telecom",
    "address",
    "partOf",
    "contact",
    "location",
    "active"
})
public class OrganizationImpl
    extends ResourceImpl
    implements Organization, ToString
{

    @XmlElement(type = IdentifierImpl.class)
    protected List<Identifier> identifier;
    @XmlElement(type = StringImpl.class)
    protected StringImpl name;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl type;
    @XmlElement(type = ContactImpl.class)
    protected List<Contact> telecom;
    @XmlElement(type = AddressImpl.class)
    protected List<Address> address;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl partOf;
    @XmlElement(type = OrganizationContactImpl.class)
    protected List<OrganizationContact> contact;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected List<ResourceReference> location;
    @XmlElement(type = BooleanImpl.class)
    protected BooleanImpl active;

    public List<Identifier> getIdentifier() {
        if (identifier == null) {
            identifier = new ArrayList<Identifier>();
        }
        return this.identifier;
    }

    public org.hl7.fhir.model.String getName() {
        return name;
    }

    public void setName(org.hl7.fhir.model.String value) {
        this.name = ((StringImpl) value);
    }

    public CodeableConcept getType() {
        return type;
    }

    public void setType(CodeableConcept value) {
        this.type = ((CodeableConceptImpl) value);
    }

    public List<Contact> getTelecom() {
        if (telecom == null) {
            telecom = new ArrayList<Contact>();
        }
        return this.telecom;
    }

    public List<Address> getAddress() {
        if (address == null) {
            address = new ArrayList<Address>();
        }
        return this.address;
    }

    public ResourceReference getPartOf() {
        return partOf;
    }

    public void setPartOf(ResourceReference value) {
        this.partOf = ((ResourceReferenceImpl) value);
    }

    public List<OrganizationContact> getContact() {
        if (contact == null) {
            contact = new ArrayList<OrganizationContact>();
        }
        return this.contact;
    }

    public List<ResourceReference> getLocation() {
        if (location == null) {
            location = new ArrayList<ResourceReference>();
        }
        return this.location;
    }

    public Boolean getActive() {
        return active;
    }

    public void setActive(Boolean value) {
        this.active = ((BooleanImpl) value);
    }

    public java.lang.String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<Identifier> theIdentifier;
            theIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            strategy.appendField(locator, this, "identifier", buffer, theIdentifier);
        }
        {
            org.hl7.fhir.model.String theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            CodeableConcept theType;
            theType = this.getType();
            strategy.appendField(locator, this, "type", buffer, theType);
        }
        {
            List<Contact> theTelecom;
            theTelecom = (((this.telecom!= null)&&(!this.telecom.isEmpty()))?this.getTelecom():null);
            strategy.appendField(locator, this, "telecom", buffer, theTelecom);
        }
        {
            List<Address> theAddress;
            theAddress = (((this.address!= null)&&(!this.address.isEmpty()))?this.getAddress():null);
            strategy.appendField(locator, this, "address", buffer, theAddress);
        }
        {
            ResourceReference thePartOf;
            thePartOf = this.getPartOf();
            strategy.appendField(locator, this, "partOf", buffer, thePartOf);
        }
        {
            List<OrganizationContact> theContact;
            theContact = (((this.contact!= null)&&(!this.contact.isEmpty()))?this.getContact():null);
            strategy.appendField(locator, this, "contact", buffer, theContact);
        }
        {
            List<ResourceReference> theLocation;
            theLocation = (((this.location!= null)&&(!this.location.isEmpty()))?this.getLocation():null);
            strategy.appendField(locator, this, "location", buffer, theLocation);
        }
        {
            Boolean theActive;
            theActive = this.getActive();
            strategy.appendField(locator, this, "active", buffer, theActive);
        }
        return buffer;
    }

}

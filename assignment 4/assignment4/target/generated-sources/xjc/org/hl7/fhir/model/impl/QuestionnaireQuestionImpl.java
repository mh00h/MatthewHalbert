//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.02.28 at 10:41:42 AM MST 
//


package org.hl7.fhir.model.impl;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Address;
import org.hl7.fhir.model.Attachment;
import org.hl7.fhir.model.Base64Binary;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Coding;
import org.hl7.fhir.model.Contact;
import org.hl7.fhir.model.Date;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Decimal;
import org.hl7.fhir.model.HumanName;
import org.hl7.fhir.model.Id;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Instant;
import org.hl7.fhir.model.Integer;
import org.hl7.fhir.model.Oid;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.Quantity;
import org.hl7.fhir.model.QuestionnaireGroup;
import org.hl7.fhir.model.QuestionnaireQuestion;
import org.hl7.fhir.model.Range;
import org.hl7.fhir.model.Ratio;
import org.hl7.fhir.model.ResourceReference;
import org.hl7.fhir.model.SampledData;
import org.hl7.fhir.model.Schedule;
import org.hl7.fhir.model.Uri;
import org.hl7.fhir.model.Uuid;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Questionnaire.Question", propOrder = {
    "name",
    "text",
    "answerDecimal",
    "answerInteger",
    "answerBoolean",
    "answerDate",
    "answerString",
    "answerDateTime",
    "answerInstant",
    "choice",
    "options",
    "dataBoolean",
    "dataInteger",
    "dataDecimal",
    "dataBase64Binary",
    "dataInstant",
    "dataString",
    "dataUri",
    "dataDate",
    "dataDateTime",
    "dataCode",
    "dataOid",
    "dataUuid",
    "dataId",
    "dataAttachment",
    "dataIdentifier",
    "dataCodeableConcept",
    "dataCoding",
    "dataQuantity",
    "dataRange",
    "dataPeriod",
    "dataRatio",
    "dataResource",
    "dataSampledData",
    "dataHumanName",
    "dataAddress",
    "dataContact",
    "dataSchedule",
    "remarks",
    "group"
})
public class QuestionnaireQuestionImpl
    extends BackboneElementImpl
    implements QuestionnaireQuestion, ToString
{

    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl name;
    @XmlElement(type = StringImpl.class)
    protected StringImpl text;
    @XmlElement(type = DecimalImpl.class)
    protected DecimalImpl answerDecimal;
    @XmlElement(type = IntegerImpl.class)
    protected IntegerImpl answerInteger;
    @XmlElement(type = BooleanImpl.class)
    protected BooleanImpl answerBoolean;
    @XmlElement(type = DateImpl.class)
    protected DateImpl answerDate;
    @XmlElement(type = StringImpl.class)
    protected StringImpl answerString;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl answerDateTime;
    @XmlElement(type = InstantImpl.class)
    protected InstantImpl answerInstant;
    @XmlElement(type = CodingImpl.class)
    protected List<Coding> choice;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl options;
    @XmlElement(type = BooleanImpl.class)
    protected BooleanImpl dataBoolean;
    @XmlElement(type = IntegerImpl.class)
    protected IntegerImpl dataInteger;
    @XmlElement(type = DecimalImpl.class)
    protected DecimalImpl dataDecimal;
    @XmlElement(type = Base64BinaryImpl.class)
    protected Base64BinaryImpl dataBase64Binary;
    @XmlElement(type = InstantImpl.class)
    protected InstantImpl dataInstant;
    @XmlElement(type = StringImpl.class)
    protected StringImpl dataString;
    @XmlElement(type = UriImpl.class)
    protected UriImpl dataUri;
    @XmlElement(type = DateImpl.class)
    protected DateImpl dataDate;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl dataDateTime;
    @XmlElement(type = CodeImpl.class)
    protected CodeImpl dataCode;
    @XmlElement(type = OidImpl.class)
    protected OidImpl dataOid;
    @XmlElement(type = UuidImpl.class)
    protected UuidImpl dataUuid;
    @XmlElement(type = IdImpl.class)
    protected IdImpl dataId;
    @XmlElement(type = AttachmentImpl.class)
    protected AttachmentImpl dataAttachment;
    @XmlElement(type = IdentifierImpl.class)
    protected IdentifierImpl dataIdentifier;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl dataCodeableConcept;
    @XmlElement(type = CodingImpl.class)
    protected CodingImpl dataCoding;
    @XmlElement(type = QuantityImpl.class)
    protected QuantityImpl dataQuantity;
    @XmlElement(type = RangeImpl.class)
    protected RangeImpl dataRange;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl dataPeriod;
    @XmlElement(type = RatioImpl.class)
    protected RatioImpl dataRatio;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl dataResource;
    @XmlElement(type = SampledDataImpl.class)
    protected SampledDataImpl dataSampledData;
    @XmlElement(type = HumanNameImpl.class)
    protected HumanNameImpl dataHumanName;
    @XmlElement(type = AddressImpl.class)
    protected AddressImpl dataAddress;
    @XmlElement(type = ContactImpl.class)
    protected ContactImpl dataContact;
    @XmlElement(type = ScheduleImpl.class)
    protected ScheduleImpl dataSchedule;
    @XmlElement(type = StringImpl.class)
    protected StringImpl remarks;
    @XmlElement(type = QuestionnaireGroupImpl.class)
    protected List<QuestionnaireGroup> group;

    public CodeableConcept getName() {
        return name;
    }

    public void setName(CodeableConcept value) {
        this.name = ((CodeableConceptImpl) value);
    }

    public org.hl7.fhir.model.String getText() {
        return text;
    }

    public void setText(org.hl7.fhir.model.String value) {
        this.text = ((StringImpl) value);
    }

    public Decimal getAnswerDecimal() {
        return answerDecimal;
    }

    public void setAnswerDecimal(Decimal value) {
        this.answerDecimal = ((DecimalImpl) value);
    }

    public Integer getAnswerInteger() {
        return answerInteger;
    }

    public void setAnswerInteger(Integer value) {
        this.answerInteger = ((IntegerImpl) value);
    }

    public Boolean getAnswerBoolean() {
        return answerBoolean;
    }

    public void setAnswerBoolean(Boolean value) {
        this.answerBoolean = ((BooleanImpl) value);
    }

    public Date getAnswerDate() {
        return answerDate;
    }

    public void setAnswerDate(Date value) {
        this.answerDate = ((DateImpl) value);
    }

    public org.hl7.fhir.model.String getAnswerString() {
        return answerString;
    }

    public void setAnswerString(org.hl7.fhir.model.String value) {
        this.answerString = ((StringImpl) value);
    }

    public DateTime getAnswerDateTime() {
        return answerDateTime;
    }

    public void setAnswerDateTime(DateTime value) {
        this.answerDateTime = ((DateTimeImpl) value);
    }

    public Instant getAnswerInstant() {
        return answerInstant;
    }

    public void setAnswerInstant(Instant value) {
        this.answerInstant = ((InstantImpl) value);
    }

    public List<Coding> getChoice() {
        if (choice == null) {
            choice = new ArrayList<Coding>();
        }
        return this.choice;
    }

    public ResourceReference getOptions() {
        return options;
    }

    public void setOptions(ResourceReference value) {
        this.options = ((ResourceReferenceImpl) value);
    }

    public Boolean getDataBoolean() {
        return dataBoolean;
    }

    public void setDataBoolean(Boolean value) {
        this.dataBoolean = ((BooleanImpl) value);
    }

    public Integer getDataInteger() {
        return dataInteger;
    }

    public void setDataInteger(Integer value) {
        this.dataInteger = ((IntegerImpl) value);
    }

    public Decimal getDataDecimal() {
        return dataDecimal;
    }

    public void setDataDecimal(Decimal value) {
        this.dataDecimal = ((DecimalImpl) value);
    }

    public Base64Binary getDataBase64Binary() {
        return dataBase64Binary;
    }

    public void setDataBase64Binary(Base64Binary value) {
        this.dataBase64Binary = ((Base64BinaryImpl) value);
    }

    public Instant getDataInstant() {
        return dataInstant;
    }

    public void setDataInstant(Instant value) {
        this.dataInstant = ((InstantImpl) value);
    }

    public org.hl7.fhir.model.String getDataString() {
        return dataString;
    }

    public void setDataString(org.hl7.fhir.model.String value) {
        this.dataString = ((StringImpl) value);
    }

    public Uri getDataUri() {
        return dataUri;
    }

    public void setDataUri(Uri value) {
        this.dataUri = ((UriImpl) value);
    }

    public Date getDataDate() {
        return dataDate;
    }

    public void setDataDate(Date value) {
        this.dataDate = ((DateImpl) value);
    }

    public DateTime getDataDateTime() {
        return dataDateTime;
    }

    public void setDataDateTime(DateTime value) {
        this.dataDateTime = ((DateTimeImpl) value);
    }

    public Code getDataCode() {
        return dataCode;
    }

    public void setDataCode(Code value) {
        this.dataCode = ((CodeImpl) value);
    }

    public Oid getDataOid() {
        return dataOid;
    }

    public void setDataOid(Oid value) {
        this.dataOid = ((OidImpl) value);
    }

    public Uuid getDataUuid() {
        return dataUuid;
    }

    public void setDataUuid(Uuid value) {
        this.dataUuid = ((UuidImpl) value);
    }

    public Id getDataId() {
        return dataId;
    }

    public void setDataId(Id value) {
        this.dataId = ((IdImpl) value);
    }

    public Attachment getDataAttachment() {
        return dataAttachment;
    }

    public void setDataAttachment(Attachment value) {
        this.dataAttachment = ((AttachmentImpl) value);
    }

    public Identifier getDataIdentifier() {
        return dataIdentifier;
    }

    public void setDataIdentifier(Identifier value) {
        this.dataIdentifier = ((IdentifierImpl) value);
    }

    public CodeableConcept getDataCodeableConcept() {
        return dataCodeableConcept;
    }

    public void setDataCodeableConcept(CodeableConcept value) {
        this.dataCodeableConcept = ((CodeableConceptImpl) value);
    }

    public Coding getDataCoding() {
        return dataCoding;
    }

    public void setDataCoding(Coding value) {
        this.dataCoding = ((CodingImpl) value);
    }

    public Quantity getDataQuantity() {
        return dataQuantity;
    }

    public void setDataQuantity(Quantity value) {
        this.dataQuantity = ((QuantityImpl) value);
    }

    public Range getDataRange() {
        return dataRange;
    }

    public void setDataRange(Range value) {
        this.dataRange = ((RangeImpl) value);
    }

    public Period getDataPeriod() {
        return dataPeriod;
    }

    public void setDataPeriod(Period value) {
        this.dataPeriod = ((PeriodImpl) value);
    }

    public Ratio getDataRatio() {
        return dataRatio;
    }

    public void setDataRatio(Ratio value) {
        this.dataRatio = ((RatioImpl) value);
    }

    public ResourceReference getDataResource() {
        return dataResource;
    }

    public void setDataResource(ResourceReference value) {
        this.dataResource = ((ResourceReferenceImpl) value);
    }

    public SampledData getDataSampledData() {
        return dataSampledData;
    }

    public void setDataSampledData(SampledData value) {
        this.dataSampledData = ((SampledDataImpl) value);
    }

    public HumanName getDataHumanName() {
        return dataHumanName;
    }

    public void setDataHumanName(HumanName value) {
        this.dataHumanName = ((HumanNameImpl) value);
    }

    public Address getDataAddress() {
        return dataAddress;
    }

    public void setDataAddress(Address value) {
        this.dataAddress = ((AddressImpl) value);
    }

    public Contact getDataContact() {
        return dataContact;
    }

    public void setDataContact(Contact value) {
        this.dataContact = ((ContactImpl) value);
    }

    public Schedule getDataSchedule() {
        return dataSchedule;
    }

    public void setDataSchedule(Schedule value) {
        this.dataSchedule = ((ScheduleImpl) value);
    }

    public org.hl7.fhir.model.String getRemarks() {
        return remarks;
    }

    public void setRemarks(org.hl7.fhir.model.String value) {
        this.remarks = ((StringImpl) value);
    }

    public List<QuestionnaireGroup> getGroup() {
        if (group == null) {
            group = new ArrayList<QuestionnaireGroup>();
        }
        return this.group;
    }

    public java.lang.String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CodeableConcept theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            org.hl7.fhir.model.String theText;
            theText = this.getText();
            strategy.appendField(locator, this, "text", buffer, theText);
        }
        {
            Decimal theAnswerDecimal;
            theAnswerDecimal = this.getAnswerDecimal();
            strategy.appendField(locator, this, "answerDecimal", buffer, theAnswerDecimal);
        }
        {
            Integer theAnswerInteger;
            theAnswerInteger = this.getAnswerInteger();
            strategy.appendField(locator, this, "answerInteger", buffer, theAnswerInteger);
        }
        {
            Boolean theAnswerBoolean;
            theAnswerBoolean = this.getAnswerBoolean();
            strategy.appendField(locator, this, "answerBoolean", buffer, theAnswerBoolean);
        }
        {
            Date theAnswerDate;
            theAnswerDate = this.getAnswerDate();
            strategy.appendField(locator, this, "answerDate", buffer, theAnswerDate);
        }
        {
            org.hl7.fhir.model.String theAnswerString;
            theAnswerString = this.getAnswerString();
            strategy.appendField(locator, this, "answerString", buffer, theAnswerString);
        }
        {
            DateTime theAnswerDateTime;
            theAnswerDateTime = this.getAnswerDateTime();
            strategy.appendField(locator, this, "answerDateTime", buffer, theAnswerDateTime);
        }
        {
            Instant theAnswerInstant;
            theAnswerInstant = this.getAnswerInstant();
            strategy.appendField(locator, this, "answerInstant", buffer, theAnswerInstant);
        }
        {
            List<Coding> theChoice;
            theChoice = (((this.choice!= null)&&(!this.choice.isEmpty()))?this.getChoice():null);
            strategy.appendField(locator, this, "choice", buffer, theChoice);
        }
        {
            ResourceReference theOptions;
            theOptions = this.getOptions();
            strategy.appendField(locator, this, "options", buffer, theOptions);
        }
        {
            Boolean theDataBoolean;
            theDataBoolean = this.getDataBoolean();
            strategy.appendField(locator, this, "dataBoolean", buffer, theDataBoolean);
        }
        {
            Integer theDataInteger;
            theDataInteger = this.getDataInteger();
            strategy.appendField(locator, this, "dataInteger", buffer, theDataInteger);
        }
        {
            Decimal theDataDecimal;
            theDataDecimal = this.getDataDecimal();
            strategy.appendField(locator, this, "dataDecimal", buffer, theDataDecimal);
        }
        {
            Base64Binary theDataBase64Binary;
            theDataBase64Binary = this.getDataBase64Binary();
            strategy.appendField(locator, this, "dataBase64Binary", buffer, theDataBase64Binary);
        }
        {
            Instant theDataInstant;
            theDataInstant = this.getDataInstant();
            strategy.appendField(locator, this, "dataInstant", buffer, theDataInstant);
        }
        {
            org.hl7.fhir.model.String theDataString;
            theDataString = this.getDataString();
            strategy.appendField(locator, this, "dataString", buffer, theDataString);
        }
        {
            Uri theDataUri;
            theDataUri = this.getDataUri();
            strategy.appendField(locator, this, "dataUri", buffer, theDataUri);
        }
        {
            Date theDataDate;
            theDataDate = this.getDataDate();
            strategy.appendField(locator, this, "dataDate", buffer, theDataDate);
        }
        {
            DateTime theDataDateTime;
            theDataDateTime = this.getDataDateTime();
            strategy.appendField(locator, this, "dataDateTime", buffer, theDataDateTime);
        }
        {
            Code theDataCode;
            theDataCode = this.getDataCode();
            strategy.appendField(locator, this, "dataCode", buffer, theDataCode);
        }
        {
            Oid theDataOid;
            theDataOid = this.getDataOid();
            strategy.appendField(locator, this, "dataOid", buffer, theDataOid);
        }
        {
            Uuid theDataUuid;
            theDataUuid = this.getDataUuid();
            strategy.appendField(locator, this, "dataUuid", buffer, theDataUuid);
        }
        {
            Id theDataId;
            theDataId = this.getDataId();
            strategy.appendField(locator, this, "dataId", buffer, theDataId);
        }
        {
            Attachment theDataAttachment;
            theDataAttachment = this.getDataAttachment();
            strategy.appendField(locator, this, "dataAttachment", buffer, theDataAttachment);
        }
        {
            Identifier theDataIdentifier;
            theDataIdentifier = this.getDataIdentifier();
            strategy.appendField(locator, this, "dataIdentifier", buffer, theDataIdentifier);
        }
        {
            CodeableConcept theDataCodeableConcept;
            theDataCodeableConcept = this.getDataCodeableConcept();
            strategy.appendField(locator, this, "dataCodeableConcept", buffer, theDataCodeableConcept);
        }
        {
            Coding theDataCoding;
            theDataCoding = this.getDataCoding();
            strategy.appendField(locator, this, "dataCoding", buffer, theDataCoding);
        }
        {
            Quantity theDataQuantity;
            theDataQuantity = this.getDataQuantity();
            strategy.appendField(locator, this, "dataQuantity", buffer, theDataQuantity);
        }
        {
            Range theDataRange;
            theDataRange = this.getDataRange();
            strategy.appendField(locator, this, "dataRange", buffer, theDataRange);
        }
        {
            Period theDataPeriod;
            theDataPeriod = this.getDataPeriod();
            strategy.appendField(locator, this, "dataPeriod", buffer, theDataPeriod);
        }
        {
            Ratio theDataRatio;
            theDataRatio = this.getDataRatio();
            strategy.appendField(locator, this, "dataRatio", buffer, theDataRatio);
        }
        {
            ResourceReference theDataResource;
            theDataResource = this.getDataResource();
            strategy.appendField(locator, this, "dataResource", buffer, theDataResource);
        }
        {
            SampledData theDataSampledData;
            theDataSampledData = this.getDataSampledData();
            strategy.appendField(locator, this, "dataSampledData", buffer, theDataSampledData);
        }
        {
            HumanName theDataHumanName;
            theDataHumanName = this.getDataHumanName();
            strategy.appendField(locator, this, "dataHumanName", buffer, theDataHumanName);
        }
        {
            Address theDataAddress;
            theDataAddress = this.getDataAddress();
            strategy.appendField(locator, this, "dataAddress", buffer, theDataAddress);
        }
        {
            Contact theDataContact;
            theDataContact = this.getDataContact();
            strategy.appendField(locator, this, "dataContact", buffer, theDataContact);
        }
        {
            Schedule theDataSchedule;
            theDataSchedule = this.getDataSchedule();
            strategy.appendField(locator, this, "dataSchedule", buffer, theDataSchedule);
        }
        {
            org.hl7.fhir.model.String theRemarks;
            theRemarks = this.getRemarks();
            strategy.appendField(locator, this, "remarks", buffer, theRemarks);
        }
        {
            List<QuestionnaireGroup> theGroup;
            theGroup = (((this.group!= null)&&(!this.group.isEmpty()))?this.getGroup():null);
            strategy.appendField(locator, this, "group", buffer, theGroup);
        }
        return buffer;
    }

}

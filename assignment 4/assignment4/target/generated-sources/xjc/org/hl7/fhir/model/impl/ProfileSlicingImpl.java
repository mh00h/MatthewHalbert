//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.02.28 at 10:41:42 AM MST 
//


package org.hl7.fhir.model.impl;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.Id;
import org.hl7.fhir.model.ProfileSlicing;
import org.hl7.fhir.model.SlicingRules;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Profile.Slicing", propOrder = {
    "discriminator",
    "ordered",
    "rules"
})
public class ProfileSlicingImpl
    extends BackboneElementImpl
    implements ProfileSlicing, ToString
{

    @XmlElement(required = true, type = IdImpl.class)
    protected IdImpl discriminator;
    @XmlElement(required = true, type = BooleanImpl.class)
    protected BooleanImpl ordered;
    @XmlElement(required = true, type = SlicingRulesImpl.class)
    protected SlicingRulesImpl rules;

    public Id getDiscriminator() {
        return discriminator;
    }

    public void setDiscriminator(Id value) {
        this.discriminator = ((IdImpl) value);
    }

    public Boolean getOrdered() {
        return ordered;
    }

    public void setOrdered(Boolean value) {
        this.ordered = ((BooleanImpl) value);
    }

    public SlicingRules getRules() {
        return rules;
    }

    public void setRules(SlicingRules value) {
        this.rules = ((SlicingRulesImpl) value);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            Id theDiscriminator;
            theDiscriminator = this.getDiscriminator();
            strategy.appendField(locator, this, "discriminator", buffer, theDiscriminator);
        }
        {
            Boolean theOrdered;
            theOrdered = this.getOrdered();
            strategy.appendField(locator, this, "ordered", buffer, theOrdered);
        }
        {
            SlicingRules theRules;
            theRules = this.getRules();
            strategy.appendField(locator, this, "rules", buffer, theRules);
        }
        return buffer;
    }

}

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.02.28 at 10:41:42 AM MST 
//


package org.hl7.fhir.model.impl;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.DocumentReference;
import org.hl7.fhir.model.DocumentReferenceContext;
import org.hl7.fhir.model.DocumentReferenceRelatesTo;
import org.hl7.fhir.model.DocumentReferenceService;
import org.hl7.fhir.model.DocumentReferenceStatus;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Instant;
import org.hl7.fhir.model.Integer;
import org.hl7.fhir.model.ResourceReference;
import org.hl7.fhir.model.Uri;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DocumentReference", propOrder = {
    "masterIdentifier",
    "identifier",
    "subject",
    "type",
    "clazz",
    "author",
    "custodian",
    "policyManager",
    "authenticator",
    "created",
    "indexed",
    "status",
    "docStatus",
    "relatesTo",
    "description",
    "confidentiality",
    "primaryLanguage",
    "mimeType",
    "format",
    "size",
    "hash",
    "location",
    "service",
    "context"
})
public class DocumentReferenceImpl
    extends ResourceImpl
    implements DocumentReference, ToString
{

    @XmlElement(required = true, type = IdentifierImpl.class)
    protected IdentifierImpl masterIdentifier;
    @XmlElement(type = IdentifierImpl.class)
    protected List<Identifier> identifier;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(required = true, type = CodeableConceptImpl.class)
    protected CodeableConceptImpl type;
    @XmlElement(name = "class", type = CodeableConceptImpl.class)
    protected CodeableConceptImpl clazz;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected List<ResourceReference> author;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl custodian;
    @XmlElement(type = UriImpl.class)
    protected UriImpl policyManager;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl authenticator;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl created;
    @XmlElement(required = true, type = InstantImpl.class)
    protected InstantImpl indexed;
    @XmlElement(required = true, type = DocumentReferenceStatusImpl.class)
    protected DocumentReferenceStatusImpl status;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl docStatus;
    @XmlElement(type = DocumentReferenceRelatesToImpl.class)
    protected List<DocumentReferenceRelatesTo> relatesTo;
    @XmlElement(type = StringImpl.class)
    protected StringImpl description;
    @XmlElement(type = CodeableConceptImpl.class)
    protected List<CodeableConcept> confidentiality;
    @XmlElement(type = CodeImpl.class)
    protected CodeImpl primaryLanguage;
    @XmlElement(required = true, type = CodeImpl.class)
    protected CodeImpl mimeType;
    @XmlElement(type = UriImpl.class)
    protected List<Uri> format;
    @XmlElement(type = IntegerImpl.class)
    protected IntegerImpl size;
    @XmlElement(type = StringImpl.class)
    protected StringImpl hash;
    @XmlElement(type = UriImpl.class)
    protected UriImpl location;
    @XmlElement(type = DocumentReferenceServiceImpl.class)
    protected DocumentReferenceServiceImpl service;
    @XmlElement(type = DocumentReferenceContextImpl.class)
    protected DocumentReferenceContextImpl context;

    public Identifier getMasterIdentifier() {
        return masterIdentifier;
    }

    public void setMasterIdentifier(Identifier value) {
        this.masterIdentifier = ((IdentifierImpl) value);
    }

    public List<Identifier> getIdentifier() {
        if (identifier == null) {
            identifier = new ArrayList<Identifier>();
        }
        return this.identifier;
    }

    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    public CodeableConcept getType() {
        return type;
    }

    public void setType(CodeableConcept value) {
        this.type = ((CodeableConceptImpl) value);
    }

    public CodeableConcept getClazz() {
        return clazz;
    }

    public void setClazz(CodeableConcept value) {
        this.clazz = ((CodeableConceptImpl) value);
    }

    public List<ResourceReference> getAuthor() {
        if (author == null) {
            author = new ArrayList<ResourceReference>();
        }
        return this.author;
    }

    public ResourceReference getCustodian() {
        return custodian;
    }

    public void setCustodian(ResourceReference value) {
        this.custodian = ((ResourceReferenceImpl) value);
    }

    public Uri getPolicyManager() {
        return policyManager;
    }

    public void setPolicyManager(Uri value) {
        this.policyManager = ((UriImpl) value);
    }

    public ResourceReference getAuthenticator() {
        return authenticator;
    }

    public void setAuthenticator(ResourceReference value) {
        this.authenticator = ((ResourceReferenceImpl) value);
    }

    public DateTime getCreated() {
        return created;
    }

    public void setCreated(DateTime value) {
        this.created = ((DateTimeImpl) value);
    }

    public Instant getIndexed() {
        return indexed;
    }

    public void setIndexed(Instant value) {
        this.indexed = ((InstantImpl) value);
    }

    public DocumentReferenceStatus getStatus() {
        return status;
    }

    public void setStatus(DocumentReferenceStatus value) {
        this.status = ((DocumentReferenceStatusImpl) value);
    }

    public CodeableConcept getDocStatus() {
        return docStatus;
    }

    public void setDocStatus(CodeableConcept value) {
        this.docStatus = ((CodeableConceptImpl) value);
    }

    public List<DocumentReferenceRelatesTo> getRelatesTo() {
        if (relatesTo == null) {
            relatesTo = new ArrayList<DocumentReferenceRelatesTo>();
        }
        return this.relatesTo;
    }

    public org.hl7.fhir.model.String getDescription() {
        return description;
    }

    public void setDescription(org.hl7.fhir.model.String value) {
        this.description = ((StringImpl) value);
    }

    public List<CodeableConcept> getConfidentiality() {
        if (confidentiality == null) {
            confidentiality = new ArrayList<CodeableConcept>();
        }
        return this.confidentiality;
    }

    public Code getPrimaryLanguage() {
        return primaryLanguage;
    }

    public void setPrimaryLanguage(Code value) {
        this.primaryLanguage = ((CodeImpl) value);
    }

    public Code getMimeType() {
        return mimeType;
    }

    public void setMimeType(Code value) {
        this.mimeType = ((CodeImpl) value);
    }

    public List<Uri> getFormat() {
        if (format == null) {
            format = new ArrayList<Uri>();
        }
        return this.format;
    }

    public Integer getSize() {
        return size;
    }

    public void setSize(Integer value) {
        this.size = ((IntegerImpl) value);
    }

    public org.hl7.fhir.model.String getHash() {
        return hash;
    }

    public void setHash(org.hl7.fhir.model.String value) {
        this.hash = ((StringImpl) value);
    }

    public Uri getLocation() {
        return location;
    }

    public void setLocation(Uri value) {
        this.location = ((UriImpl) value);
    }

    public DocumentReferenceService getService() {
        return service;
    }

    public void setService(DocumentReferenceService value) {
        this.service = ((DocumentReferenceServiceImpl) value);
    }

    public DocumentReferenceContext getContext() {
        return context;
    }

    public void setContext(DocumentReferenceContext value) {
        this.context = ((DocumentReferenceContextImpl) value);
    }

    public java.lang.String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            Identifier theMasterIdentifier;
            theMasterIdentifier = this.getMasterIdentifier();
            strategy.appendField(locator, this, "masterIdentifier", buffer, theMasterIdentifier);
        }
        {
            List<Identifier> theIdentifier;
            theIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            strategy.appendField(locator, this, "identifier", buffer, theIdentifier);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            strategy.appendField(locator, this, "subject", buffer, theSubject);
        }
        {
            CodeableConcept theType;
            theType = this.getType();
            strategy.appendField(locator, this, "type", buffer, theType);
        }
        {
            CodeableConcept theClazz;
            theClazz = this.getClazz();
            strategy.appendField(locator, this, "clazz", buffer, theClazz);
        }
        {
            List<ResourceReference> theAuthor;
            theAuthor = (((this.author!= null)&&(!this.author.isEmpty()))?this.getAuthor():null);
            strategy.appendField(locator, this, "author", buffer, theAuthor);
        }
        {
            ResourceReference theCustodian;
            theCustodian = this.getCustodian();
            strategy.appendField(locator, this, "custodian", buffer, theCustodian);
        }
        {
            Uri thePolicyManager;
            thePolicyManager = this.getPolicyManager();
            strategy.appendField(locator, this, "policyManager", buffer, thePolicyManager);
        }
        {
            ResourceReference theAuthenticator;
            theAuthenticator = this.getAuthenticator();
            strategy.appendField(locator, this, "authenticator", buffer, theAuthenticator);
        }
        {
            DateTime theCreated;
            theCreated = this.getCreated();
            strategy.appendField(locator, this, "created", buffer, theCreated);
        }
        {
            Instant theIndexed;
            theIndexed = this.getIndexed();
            strategy.appendField(locator, this, "indexed", buffer, theIndexed);
        }
        {
            DocumentReferenceStatus theStatus;
            theStatus = this.getStatus();
            strategy.appendField(locator, this, "status", buffer, theStatus);
        }
        {
            CodeableConcept theDocStatus;
            theDocStatus = this.getDocStatus();
            strategy.appendField(locator, this, "docStatus", buffer, theDocStatus);
        }
        {
            List<DocumentReferenceRelatesTo> theRelatesTo;
            theRelatesTo = (((this.relatesTo!= null)&&(!this.relatesTo.isEmpty()))?this.getRelatesTo():null);
            strategy.appendField(locator, this, "relatesTo", buffer, theRelatesTo);
        }
        {
            org.hl7.fhir.model.String theDescription;
            theDescription = this.getDescription();
            strategy.appendField(locator, this, "description", buffer, theDescription);
        }
        {
            List<CodeableConcept> theConfidentiality;
            theConfidentiality = (((this.confidentiality!= null)&&(!this.confidentiality.isEmpty()))?this.getConfidentiality():null);
            strategy.appendField(locator, this, "confidentiality", buffer, theConfidentiality);
        }
        {
            Code thePrimaryLanguage;
            thePrimaryLanguage = this.getPrimaryLanguage();
            strategy.appendField(locator, this, "primaryLanguage", buffer, thePrimaryLanguage);
        }
        {
            Code theMimeType;
            theMimeType = this.getMimeType();
            strategy.appendField(locator, this, "mimeType", buffer, theMimeType);
        }
        {
            List<Uri> theFormat;
            theFormat = (((this.format!= null)&&(!this.format.isEmpty()))?this.getFormat():null);
            strategy.appendField(locator, this, "format", buffer, theFormat);
        }
        {
            Integer theSize;
            theSize = this.getSize();
            strategy.appendField(locator, this, "size", buffer, theSize);
        }
        {
            org.hl7.fhir.model.String theHash;
            theHash = this.getHash();
            strategy.appendField(locator, this, "hash", buffer, theHash);
        }
        {
            Uri theLocation;
            theLocation = this.getLocation();
            strategy.appendField(locator, this, "location", buffer, theLocation);
        }
        {
            DocumentReferenceService theService;
            theService = this.getService();
            strategy.appendField(locator, this, "service", buffer, theService);
        }
        {
            DocumentReferenceContext theContext;
            theContext = this.getContext();
            strategy.appendField(locator, this, "context", buffer, theContext);
        }
        return buffer;
    }

}

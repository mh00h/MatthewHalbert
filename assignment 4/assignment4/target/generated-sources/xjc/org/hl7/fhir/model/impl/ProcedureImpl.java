//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.02.28 at 10:41:42 AM MST 
//


package org.hl7.fhir.model.impl;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.Procedure;
import org.hl7.fhir.model.ProcedurePerformer;
import org.hl7.fhir.model.ProcedureRelatedItem;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Procedure", propOrder = {
    "identifier",
    "subject",
    "type",
    "bodySite",
    "indication",
    "performer",
    "date",
    "encounter",
    "outcome",
    "report",
    "complication",
    "followUp",
    "relatedItem",
    "notes"
})
public class ProcedureImpl
    extends ResourceImpl
    implements Procedure, ToString
{

    @XmlElement(type = IdentifierImpl.class)
    protected List<Identifier> identifier;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(required = true, type = CodeableConceptImpl.class)
    protected CodeableConceptImpl type;
    @XmlElement(type = CodeableConceptImpl.class)
    protected List<CodeableConcept> bodySite;
    @XmlElement(type = CodeableConceptImpl.class)
    protected List<CodeableConcept> indication;
    @XmlElement(type = ProcedurePerformerImpl.class)
    protected List<ProcedurePerformer> performer;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl date;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl encounter;
    @XmlElement(type = StringImpl.class)
    protected StringImpl outcome;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected List<ResourceReference> report;
    @XmlElement(type = CodeableConceptImpl.class)
    protected List<CodeableConcept> complication;
    @XmlElement(type = StringImpl.class)
    protected StringImpl followUp;
    @XmlElement(type = ProcedureRelatedItemImpl.class)
    protected List<ProcedureRelatedItem> relatedItem;
    @XmlElement(type = StringImpl.class)
    protected StringImpl notes;

    public List<Identifier> getIdentifier() {
        if (identifier == null) {
            identifier = new ArrayList<Identifier>();
        }
        return this.identifier;
    }

    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    public CodeableConcept getType() {
        return type;
    }

    public void setType(CodeableConcept value) {
        this.type = ((CodeableConceptImpl) value);
    }

    public List<CodeableConcept> getBodySite() {
        if (bodySite == null) {
            bodySite = new ArrayList<CodeableConcept>();
        }
        return this.bodySite;
    }

    public List<CodeableConcept> getIndication() {
        if (indication == null) {
            indication = new ArrayList<CodeableConcept>();
        }
        return this.indication;
    }

    public List<ProcedurePerformer> getPerformer() {
        if (performer == null) {
            performer = new ArrayList<ProcedurePerformer>();
        }
        return this.performer;
    }

    public Period getDate() {
        return date;
    }

    public void setDate(Period value) {
        this.date = ((PeriodImpl) value);
    }

    public ResourceReference getEncounter() {
        return encounter;
    }

    public void setEncounter(ResourceReference value) {
        this.encounter = ((ResourceReferenceImpl) value);
    }

    public org.hl7.fhir.model.String getOutcome() {
        return outcome;
    }

    public void setOutcome(org.hl7.fhir.model.String value) {
        this.outcome = ((StringImpl) value);
    }

    public List<ResourceReference> getReport() {
        if (report == null) {
            report = new ArrayList<ResourceReference>();
        }
        return this.report;
    }

    public List<CodeableConcept> getComplication() {
        if (complication == null) {
            complication = new ArrayList<CodeableConcept>();
        }
        return this.complication;
    }

    public org.hl7.fhir.model.String getFollowUp() {
        return followUp;
    }

    public void setFollowUp(org.hl7.fhir.model.String value) {
        this.followUp = ((StringImpl) value);
    }

    public List<ProcedureRelatedItem> getRelatedItem() {
        if (relatedItem == null) {
            relatedItem = new ArrayList<ProcedureRelatedItem>();
        }
        return this.relatedItem;
    }

    public org.hl7.fhir.model.String getNotes() {
        return notes;
    }

    public void setNotes(org.hl7.fhir.model.String value) {
        this.notes = ((StringImpl) value);
    }

    public java.lang.String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<Identifier> theIdentifier;
            theIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            strategy.appendField(locator, this, "identifier", buffer, theIdentifier);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            strategy.appendField(locator, this, "subject", buffer, theSubject);
        }
        {
            CodeableConcept theType;
            theType = this.getType();
            strategy.appendField(locator, this, "type", buffer, theType);
        }
        {
            List<CodeableConcept> theBodySite;
            theBodySite = (((this.bodySite!= null)&&(!this.bodySite.isEmpty()))?this.getBodySite():null);
            strategy.appendField(locator, this, "bodySite", buffer, theBodySite);
        }
        {
            List<CodeableConcept> theIndication;
            theIndication = (((this.indication!= null)&&(!this.indication.isEmpty()))?this.getIndication():null);
            strategy.appendField(locator, this, "indication", buffer, theIndication);
        }
        {
            List<ProcedurePerformer> thePerformer;
            thePerformer = (((this.performer!= null)&&(!this.performer.isEmpty()))?this.getPerformer():null);
            strategy.appendField(locator, this, "performer", buffer, thePerformer);
        }
        {
            Period theDate;
            theDate = this.getDate();
            strategy.appendField(locator, this, "date", buffer, theDate);
        }
        {
            ResourceReference theEncounter;
            theEncounter = this.getEncounter();
            strategy.appendField(locator, this, "encounter", buffer, theEncounter);
        }
        {
            org.hl7.fhir.model.String theOutcome;
            theOutcome = this.getOutcome();
            strategy.appendField(locator, this, "outcome", buffer, theOutcome);
        }
        {
            List<ResourceReference> theReport;
            theReport = (((this.report!= null)&&(!this.report.isEmpty()))?this.getReport():null);
            strategy.appendField(locator, this, "report", buffer, theReport);
        }
        {
            List<CodeableConcept> theComplication;
            theComplication = (((this.complication!= null)&&(!this.complication.isEmpty()))?this.getComplication():null);
            strategy.appendField(locator, this, "complication", buffer, theComplication);
        }
        {
            org.hl7.fhir.model.String theFollowUp;
            theFollowUp = this.getFollowUp();
            strategy.appendField(locator, this, "followUp", buffer, theFollowUp);
        }
        {
            List<ProcedureRelatedItem> theRelatedItem;
            theRelatedItem = (((this.relatedItem!= null)&&(!this.relatedItem.isEmpty()))?this.getRelatedItem():null);
            strategy.appendField(locator, this, "relatedItem", buffer, theRelatedItem);
        }
        {
            org.hl7.fhir.model.String theNotes;
            theNotes = this.getNotes();
            strategy.appendField(locator, this, "notes", buffer, theNotes);
        }
        return buffer;
    }

}

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.02.28 at 10:41:42 AM MST 
//


package org.hl7.fhir.model.impl;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Encounter;
import org.hl7.fhir.model.EncounterClass;
import org.hl7.fhir.model.EncounterHospitalization;
import org.hl7.fhir.model.EncounterLocation;
import org.hl7.fhir.model.EncounterParticipant;
import org.hl7.fhir.model.EncounterState;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.ResourceReference;
import org.hl7.fhir.model.TimeDuration;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Encounter", propOrder = {
    "identifier",
    "status",
    "clazz",
    "type",
    "subject",
    "participant",
    "period",
    "length",
    "reason",
    "indication",
    "priority",
    "hospitalization",
    "location",
    "serviceProvider",
    "partOf"
})
public class EncounterImpl
    extends ResourceImpl
    implements Encounter, ToString
{

    @XmlElement(type = IdentifierImpl.class)
    protected List<Identifier> identifier;
    @XmlElement(required = true, type = EncounterStateImpl.class)
    protected EncounterStateImpl status;
    @XmlElement(name = "class", required = true, type = EncounterClassImpl.class)
    protected EncounterClassImpl clazz;
    @XmlElement(type = CodeableConceptImpl.class)
    protected List<CodeableConcept> type;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(type = EncounterParticipantImpl.class)
    protected List<EncounterParticipant> participant;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl period;
    @XmlElement(type = TimeDurationImpl.class)
    protected TimeDurationImpl length;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl reason;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl indication;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl priority;
    @XmlElement(type = EncounterHospitalizationImpl.class)
    protected EncounterHospitalizationImpl hospitalization;
    @XmlElement(type = EncounterLocationImpl.class)
    protected List<EncounterLocation> location;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl serviceProvider;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl partOf;

    public List<Identifier> getIdentifier() {
        if (identifier == null) {
            identifier = new ArrayList<Identifier>();
        }
        return this.identifier;
    }

    public EncounterState getStatus() {
        return status;
    }

    public void setStatus(EncounterState value) {
        this.status = ((EncounterStateImpl) value);
    }

    public EncounterClass getClazz() {
        return clazz;
    }

    public void setClazz(EncounterClass value) {
        this.clazz = ((EncounterClassImpl) value);
    }

    public List<CodeableConcept> getType() {
        if (type == null) {
            type = new ArrayList<CodeableConcept>();
        }
        return this.type;
    }

    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    public List<EncounterParticipant> getParticipant() {
        if (participant == null) {
            participant = new ArrayList<EncounterParticipant>();
        }
        return this.participant;
    }

    public Period getPeriod() {
        return period;
    }

    public void setPeriod(Period value) {
        this.period = ((PeriodImpl) value);
    }

    public TimeDuration getLength() {
        return length;
    }

    public void setLength(TimeDuration value) {
        this.length = ((TimeDurationImpl) value);
    }

    public CodeableConcept getReason() {
        return reason;
    }

    public void setReason(CodeableConcept value) {
        this.reason = ((CodeableConceptImpl) value);
    }

    public ResourceReference getIndication() {
        return indication;
    }

    public void setIndication(ResourceReference value) {
        this.indication = ((ResourceReferenceImpl) value);
    }

    public CodeableConcept getPriority() {
        return priority;
    }

    public void setPriority(CodeableConcept value) {
        this.priority = ((CodeableConceptImpl) value);
    }

    public EncounterHospitalization getHospitalization() {
        return hospitalization;
    }

    public void setHospitalization(EncounterHospitalization value) {
        this.hospitalization = ((EncounterHospitalizationImpl) value);
    }

    public List<EncounterLocation> getLocation() {
        if (location == null) {
            location = new ArrayList<EncounterLocation>();
        }
        return this.location;
    }

    public ResourceReference getServiceProvider() {
        return serviceProvider;
    }

    public void setServiceProvider(ResourceReference value) {
        this.serviceProvider = ((ResourceReferenceImpl) value);
    }

    public ResourceReference getPartOf() {
        return partOf;
    }

    public void setPartOf(ResourceReference value) {
        this.partOf = ((ResourceReferenceImpl) value);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<Identifier> theIdentifier;
            theIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            strategy.appendField(locator, this, "identifier", buffer, theIdentifier);
        }
        {
            EncounterState theStatus;
            theStatus = this.getStatus();
            strategy.appendField(locator, this, "status", buffer, theStatus);
        }
        {
            EncounterClass theClazz;
            theClazz = this.getClazz();
            strategy.appendField(locator, this, "clazz", buffer, theClazz);
        }
        {
            List<CodeableConcept> theType;
            theType = (((this.type!= null)&&(!this.type.isEmpty()))?this.getType():null);
            strategy.appendField(locator, this, "type", buffer, theType);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            strategy.appendField(locator, this, "subject", buffer, theSubject);
        }
        {
            List<EncounterParticipant> theParticipant;
            theParticipant = (((this.participant!= null)&&(!this.participant.isEmpty()))?this.getParticipant():null);
            strategy.appendField(locator, this, "participant", buffer, theParticipant);
        }
        {
            Period thePeriod;
            thePeriod = this.getPeriod();
            strategy.appendField(locator, this, "period", buffer, thePeriod);
        }
        {
            TimeDuration theLength;
            theLength = this.getLength();
            strategy.appendField(locator, this, "length", buffer, theLength);
        }
        {
            CodeableConcept theReason;
            theReason = this.getReason();
            strategy.appendField(locator, this, "reason", buffer, theReason);
        }
        {
            ResourceReference theIndication;
            theIndication = this.getIndication();
            strategy.appendField(locator, this, "indication", buffer, theIndication);
        }
        {
            CodeableConcept thePriority;
            thePriority = this.getPriority();
            strategy.appendField(locator, this, "priority", buffer, thePriority);
        }
        {
            EncounterHospitalization theHospitalization;
            theHospitalization = this.getHospitalization();
            strategy.appendField(locator, this, "hospitalization", buffer, theHospitalization);
        }
        {
            List<EncounterLocation> theLocation;
            theLocation = (((this.location!= null)&&(!this.location.isEmpty()))?this.getLocation():null);
            strategy.appendField(locator, this, "location", buffer, theLocation);
        }
        {
            ResourceReference theServiceProvider;
            theServiceProvider = this.getServiceProvider();
            strategy.appendField(locator, this, "serviceProvider", buffer, theServiceProvider);
        }
        {
            ResourceReference thePartOf;
            thePartOf = this.getPartOf();
            strategy.appendField(locator, this, "partOf", buffer, thePartOf);
        }
        return buffer;
    }

}
